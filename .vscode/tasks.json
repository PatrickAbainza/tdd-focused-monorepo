{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "Run Python API Server",
      "type": "shell",
      "command": "uv run python src/api.py",
      "options": {
        "cwd": "${workspaceFolder}/templates/python_uv"
      },
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },
    {
      "label": "Run Python Tests",
      "type": "shell",
      "command": "uv run pytest --cov=src --cov-report=term-missing --cov-report=xml:coverage.xml",
      "options": {
        "cwd": "${workspaceFolder}/templates/python_uv"
      },
      "group": {
        "kind": "test",
        "isDefault": true // Make Python tests the default test task
      },
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },
    {
      "label": "Run Node Dev Server",
      "type": "shell",
      "command": "npm run dev",
      "options": {
        "cwd": "${workspaceFolder}/templates/nodejs-vitest"
      },
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },
    {
      "label": "Run Node Tests",
      "type": "shell",
      "command": "npm test",
      "options": {
        "cwd": "${workspaceFolder}/templates/nodejs-vitest"
      },
      "group": {
        "kind": "test",
        "isDefault": false
      },
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },
    {
      "label": "Run Ruff Linter",
      "type": "shell",
      "command": "uv run ruff check .",
      "options": { "cwd": "${workspaceFolder}/templates/python_uv" },
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "new", "clear": true }
    },
    {
      "label": "Run Radon Complexity Check",
      "type": "shell",
      "command": "uv run radon cc . -a -s",
      "options": { "cwd": "${workspaceFolder}/templates/python_uv" },
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "new", "clear": true }
    },
    {
      "label": "Run Radon Maintainability Check",
      "type": "shell",
      "command": "uv run radon mi . -s",
      "options": { "cwd": "${workspaceFolder}/templates/python_uv" },
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "new", "clear": true }
    },
    {
      "label": "Run Copydetect Duplication Check",
      "type": "shell",
      "command": "uv run copydetect .",
      "options": { "cwd": "${workspaceFolder}/templates/python_uv" },
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "new", "clear": true }
    },
    {
      "label": "Python Analysis: Ruff (JSON)",
      "type": "shell",
      "command": "mkdir -p analysis_results && uv run ruff check src --output-format=json > analysis_results/ruff_results.json && ( [ \"$(cat analysis_results/ruff_results.json)\" = \"[]\" ] && echo \"Ruff: No issues found on $(date)\" || true )",
      "options": { "cwd": "${workspaceFolder}/templates/python_uv" },
      "problemMatcher": [],
      "presentation": { "reveal": "silent", "panel": "new", "clear": true }
    },
    {
      "label": "Python Analysis: Radon CC (JSON)",
      "type": "shell",
      "command": "mkdir -p analysis_results && uv run radon cc src -j > analysis_results/radon_cc_results.json",
      "options": { "cwd": "${workspaceFolder}/templates/python_uv" },
      "problemMatcher": [],
      "presentation": { "reveal": "silent", "panel": "new", "clear": true }
    },
    {
      "label": "Python Analysis: Copydetect (HTML)",
      "type": "shell",
      "command": "mkdir -p analysis_results && uv run copydetect -t src --noise-thresh 10 --guarantee-thresh 15 --extensions py -O analysis_results/copydetect_report.html",
      "options": { "cwd": "${workspaceFolder}/templates/python_uv" },
      "problemMatcher": [],
      "presentation": { "reveal": "silent", "panel": "new", "clear": true }
    },
    {
      "label": "Python Analysis: Pydeps (JSON)",
      "type": "shell",
      "command": "mkdir -p analysis_results && uv run python -m pydeps src --show-deps --pylib > analysis_results/pydeps_results.json && ( [ \"$(cat analysis_results/pydeps_results.json)\" = \"{}\" ] && echo \"Pydeps: No issues found on $(date)\" || true )",
      "options": { "cwd": "${workspaceFolder}/templates/python_uv" },
      "problemMatcher": [],
      "presentation": { "reveal": "silent", "panel": "new", "clear": true }
    },
    {
      "label": "Run All Python Analyses (JSON/HTML)",
      "dependsOn": [
        "Python Analysis: Ruff (JSON)",
        "Python Analysis: Radon CC (JSON)",
        "Python Analysis: Copydetect (HTML)",
        "Python Analysis: Pydeps (JSON)"
      ],
      "group": "build",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "new", "clear": true }
    },
    {
      "label": "Run ESLint",
      "type": "shell",
      "command": "npm run lint",
      "options": { "cwd": "${workspaceFolder}/templates/nodejs-vitest" },
      "problemMatcher": ["$eslint-compact"],
      "presentation": { "reveal": "always", "panel": "new", "clear": true }
    },
    {
      "label": "Run JSCPD Duplication Check",
      "type": "shell",
      "command": "npx jscpd src/ --min-lines 5 --threshold 0",
      "options": { "cwd": "${workspaceFolder}/templates/nodejs-vitest" },
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "new", "clear": true }
    },
    {
      "label": "Run Dependency Cruiser Graph (JSON)",
      "type": "shell",
      "command": "mkdir -p analysis_results && npx depcruise --include-only \"^src\" --output-type archi src > analysis_results/dependency-graph.json",
      "options": { "cwd": "${workspaceFolder}/templates/nodejs-vitest" },
      "problemMatcher": [],
      "presentation": { "reveal": "silent", "panel": "new", "clear": true }
    },
    {
      "label": "Run All Node Analyses",
      "dependsOn": [
        "Run ESLint",
        "Run JSCPD Duplication Check",
        "Run Dependency Cruiser Graph (JSON)"
      ],
      "group": "build",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "new", "clear": true }
    },
    {
      "label": "Run Initial Project Setup",
      "type": "shell",
      "command": "git rev-parse --is-inside-work-tree >/dev/null 2>&1 || { echo 'ERROR: Not a git repository. Please run \\\"git init\\\" first.'; exit 1; }; chmod +x scripts/setup-prereqs.sh && ./scripts/setup-prereqs.sh && make setup && uv run pre-commit install && (cd templates/nodejs-vitest && npx husky install)",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "clear": true
      },
      "problemMatcher": []
    }
  ]
}
